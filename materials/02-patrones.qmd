---
title: "Introducción a los patrones de diseño de software"
---


El término **patrón** tiene multiples significados según el contexto: patrones numéricos, patrones geométricos, etc. 


En informática, el área de [aprendizaje automático](https://es.wikipedia.org/wiki/Aprendizaje_autom%C3%A1tico) utiliza   técnicas computacionales avanzadas para buscar y encontrar patrones en los datos. 


En ingeniería de software, descubrirás a lo largo de tu carrera profesional que los mismos problemas de diseño se repiten una y otra vez. Hay muchas formas de abordar estos problemas, pero en la industria se prefieren las soluciones más flexibles y/o reutilizables. Ahí es donde los **patrones de diseño** entran en juego.

::: {.callout-note}
## **Definición**

Un patrón de diseño es una solución práctica y bien testeada a problemas recurrentes.
:::

Los patrones de diseño nos permiten (re)utilizar soluciones previamente testeadas que los desarrolladores han utilizado a menudo para resolver un problema de diseño de software, de modo que no es necesario crear una *nueva* solución a partir de los principios básicos de la programación orientada a objetos. Los patrones de diseño no son solo soluciones teóricas, son soluciones reales que se utilizan en la industria del software. 


Una buena analogía para entender el concepto de patrones de diseños es quiparalos a *planos predefinidos* que se pueden personalizar para resolver un problema de diseño recurrente en tu código.


::: {.column-margin}

![](../images/rawpixel/home-layout-discussion.jpg){fig-alt="Richard Feynman" fig-align="center" width="70%"}

*Source: [Rawpixel.com](https://www.rawpixel.com/image/691263/)*

:::


Es importante dejar claro que los patrones de diseño no son únicamente código (clases, interfaces, etc) que se añaden a tu proyecto de software. En cambio, los patrones de diseño son más como **soluciones conceptuales**: soluciones que se pùeden aplicar (y personalizar) en el diseño de software en contextos concretos para mejorar la estructura, modularidad, abstracción, flexibilidad y reutilización de tu código. Por ese motivo, en este curso describimos los patrones de diseño de forma conceptual (clases, interfaces, relaciones, etc.); obviamente, podrás implementar los patrones de diseño en el contecto del proyecto común.

::: {.callout-tip icon=false}
## **Slide Deck** 

::: slides
[Patrones de Diseño: Concepto, catálogo y principios](02-patrones-slides.qmd)
:::

:::

::: {.callout-tip icon=false}
## **Slide Deck** 

::: slides
[Patrones de Diseño: Concepto, catálogo y principios](https://cgranell.github.io/ei1039/slides/TE1_intro_patrones.html)
:::

:::