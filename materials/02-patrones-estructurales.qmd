---
title: "Patrones estructurales"
---

::: {.callout-note}
# Definición

Los **patrones estrcuturales** se refieren a la organización del código, es decir, a la composición de clases y objetos. Definen formas de componer y organizar clases para obtener fines estructurales (nuevas funciones, etc.).

:::


Las secciones relativas a los patrones estructurales se dividen en los mismos apartados, tal como reflejan los mapas conceptuales:

- Propósito (*aim*)
- Problema (*what problem does it solve?*)
- Solución (*conceptual solution*)
- Ventajas e inconvenientes (*pros and cons*)

Dejamos para la argumentación y discusión en clase la tarea de [conectar y relacionar](#relaciones-entre-patrones) los distintos patrones estructurales entre ellos, y sugerir [situaciones o aplicaciones](#aplicabilidad) donde se puedan aplicar.


### Adapter


| Propósito |  Problema |
|-----------|-----------|
| permite que clases con **interfaces incompatibles** colaboren...  | ... porque quiero utilizar cierta clase o librería externa |


::: column-screen-inset-right

![](../images/concept-maps/ADAPTER-map.png)

:::



::: {.callout-tip icon=false}
# Slide Deck 

::: slides
[Adapter pattern ](https://cgranell.github.io/ei1039/slides/TE5_adapter.html)
:::

:::


::: {.callout-tip icon=false}
# Implementación

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Adapter en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/adapter/java/example#lang-features)

:::


### Bridge

| Propósito |  Problema |
|-----------|-----------|
| **separa subsistemas**... | ... porque puede que un subsistema cambie completamente sin que eso afecte al otro subsistema |



::: column-screen-inset-right

![](../images/concept-maps/BRIDGE-map.png)

:::


::: {.callout-tip icon=false}
# Implementación

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Bridge en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/bridge/java/example#lang-features)

:::


### Facade 


| Propósito |  Problema |
|-----------|-----------|
| **simplifica la interfaz** a un subsistema... | ... porque quiero ocultar la complejidad de un subsistema a los clientes |



::: column-screen-inset-right

![](../images/concept-maps/FACADE-map.png)

:::

::: {.callout-tip icon=false}
# Slide Deck 

[Facade pattern](https://cgranell.github.io/ei1039/slides/TE5_facade.html)

:::


::: {.callout-tip icon=false}
# Implementación

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Facade en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/facade/java/example#lang-features)

:::


### Proxy



| Propósito |  Problema |
|-----------|-----------|
| **suplanta** recursos reales de forma transparente al cliente... | ... porque quiero implantar restricciones de acceso o reducir coste |



::: column-screen-inset-right

![](../images/concept-maps/PROXY-map.png)

:::

::: {.callout-tip icon=false}
# Slide Deck

[Proxy pattern](https://cgranell.github.io/ei1039/slides/TE5_proxy.html)

:::


::: {.callout-tip icon=false}
# Implementación

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Proxy en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/proxy/java/example#lang-features)

:::



### Composite

::: {.callout-tip icon=false}
# Slide Deck

[Composite pattern](https://cgranell.github.io/ei1039/slides/TE6_composite.html)

:::

### Decorator



::: {.callout-tip icon=false}
## Slide Deck 

[Decorator pattern](https://cgranell.github.io/ei1039/slides/TE6_decorator.html)

:::


### Flyweight
 
 
### Relaciones entre patrones



### Aplicabilidad



