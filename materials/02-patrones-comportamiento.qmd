---
title: "Patrones de comportamiento"
---


::: {.callout-note title="Definición"}

Los **patrones de comportamiento** se refieren a la comunicación entre objetos en tiempo de ejecución, es decir, los roles que asumen dichos objetos y cómo interactúan entre sí.

:::


Las secciones relativas a los patrones de comportamiento se dividen en los mismos apartados, tal como reflejan los mapas conceptuales:

- Propósito (*aim*)
- Problema (*what problem does it solve?*)
- Solución (*conceptual solution*)
- Ventajas e inconvenientes (*pros and cons*)

Dejamos para la argumentación y discusión en clase la tarea de [conectar y relacionar](#relaciones-entre-patrones) los distintos patrones de comportamiento entre ellos, y sugerir [situaciones o aplicaciones](#aplicabilidad) donde se puedan aplicar.



### Command



| Propósito |  Problema |
|-----------|-----------|
| permite encapsular una petición como un objeto ...  | ... porque quiero tener mayor control sobre el ciclo de vida de dicha petición |


::: column-screen-inset-right

![](../images/concept-maps/COMMAND-map.png)

:::


::: {.callout-tip icon=false title="Slide Deck"}

::: slides
[Command pattern](https://cgranell.github.io/ei1039/slides/TE8_command.html)
:::

:::


::: {.callout-tip icon=false title="Implementación"}

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Command en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/command/java/example#lang-features)

:::


### Memento


| Propósito |  Problema |
|-----------|-----------|
| permite capturar el estado de un objeto  ...  | ... porque quiero restaurar ese estado en cualquier momento |


::: column-screen-inset-right

![](../images/concept-maps/MEMENTO-map.png)


:::

::: {.callout-tip icon=false title="Implementación"}

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Memento en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/memento/java/example#lang-features)

:::


### Chain of responsibility

::: {.callout-tip icon=false title="Implementación"}

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Chain of Reponsibility en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/chain-of-responsibility/java/example#lang-features)

:::


### Interpreter


### Iterator



::: {.callout-tip icon=false title="Slide Deck"}

::: slides
[Iterator pattern](https://cgranell.github.io/ei1039/slides/TE8_iterator.html)
:::

:::


::: {.callout-tip icon=false title="Implementación"}

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Iterator en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/iterator/java/example#lang-features)

:::


### Mediator





### Observer


::: {.callout-tip icon=false title="Slide Deck"}

::: slides
[Observer pattern](https://cgranell.github.io/ei1039/slides/TE6_observer.html)
:::

:::

::: {.callout-tip icon=false title="Implementación"}

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Observer en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/observer/java/example#lang-features)

:::


### State


### Strategy

::: {.callout-tip icon=false title="Slide Deck"}

::: slides
[Strategy pattern](https://cgranell.github.io/ei1039/slides/TE7_strategy.html)
:::

:::

::: {.callout-tip icon=false title="Implementación"}

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Strategy en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/strategy/java/example#lang-features)

:::


### Template method  


::: {.callout-tip icon=false title="Slide Deck"}

::: slides
[Template Method pattern](https://cgranell.github.io/ei1039/slides/TE7_templatemethod.html)
:::

:::



::: {.callout-tip icon=false title="Implementación"}

![](https://refactoring.guru/images/content-public/logos/logo-new.png?id=97d554614702483f31e38b32e82d8e34){width=25} [Template Method en Java (refactoring.guru)](https://refactoring.guru/es/design-patterns/template-method/java/example#lang-features)

:::


 
 
### Relaciones entre patrones



### Aplicabilidad


