[
  {
    "objectID": "materials/04-referencias.html",
    "href": "materials/04-referencias.html",
    "title": "Referencias",
    "section": "",
    "text": "References\n\nAltman, Sara, Bill Behrman, and Hadley Wickham. 2021. Functional Programming. online. https://dcl-prog.stanford.edu/.\n\n\nBass, Len, Paul Clements, and Rick Kazman. 2021. Software Architecture in Practice. Addison-Wesley Professional; 4th Edition.\n\n\nBrown, Neil C. C., Felienne F. J. Hermans, and Lauren E. Margulieux. 2023. “10 Things Software Developers Should Learn about Learning.” Communications of the ACM 67 (1): 78–87. https://doi.org/10.1145/3584859.\n\n\nFowler, Martin. 2003. “Who Needs an Architect?” IEEE Software 20 (5): 2–4. https://doi.org/10.1109/MS.2003.1231144.\n\n\nFrancis, Gibin. 2022. “Software Architect — Journey.” Medium. https://gibinfrancis.medium.com/software-architect-journey-ca9398546608.\n\n\nFreeman, Eric, Elisabeth Robson, Bert Bates, and Kathy Sierra. 2004. Head First Design Patterns, 1st Edition. O’Really Media Inc.\n\n\nGamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. 1994. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley.\n\n\nGonzález-Pérez, Alberto, Ramón A. Mollineda Cárdenas, and David Llorens Piñana. 2021. “Aprendizaje Basado En Metodologías Ágiles Centradas En Diseño Evolutivo Dirigido Por Pruebas de Aceptación.” In Actas de Las XXVII Jornadas Sobre La Enseñanza Universitaria de La Informática (JENUI), 6:99–106. AENUI. https://aenui.org/actas/pdf/JENUI_2021_012.pdf.\n\n\nGonzález-Pérez, Alberto, Carlos Granell-Canut, and Ramón A. Mollineda Cárdenas. 2022. “Coordinación de Asignaturas Dirigida Por Un Proyecto de Desarrollo Ágil Con Evaluación Unificada.” In Actas de Las Jornadas Sobre Enseñanza Universitaria de La Informática (JENUI), 7:127–34. AENUI. https://aenui.org/actas/pdf/JENUI_2022_017.pdf.\n\n\nGonzález-Pérez, Alberto, and Miguel Matey-Sanz. 2021. “nativescript-task-dispatcher: A Reactive Android-Based Task Scheduler and Dispatcher.” Zenodo. https://doi.org/10.5281/zenodo.4530103.\n\n\nGonzález-Pérez, Alberto, Miguel Matey-Sanz, Carlos Granell, and Sven Casteleyn. 2022. “Using Mobile Devices as Scientific Measurement Instruments: Reliable Android Task Scheduling.” Pervasive and Mobile Computing 81: 101550. https://doi.org/https://doi.org/10.1016/j.pmcj.2022.101550.\n\n\nLang, James M. 2016. Small Teaching. Jossey-Bass. https://www.jamesmlang.com/books.\n\n\nMartin, Robert. 2002. Agile Software Development: Principles, Patterns, and Practices. Pearson Education, 1st edition. http://blog.cleancoder.com/uncle-bob/2020/10/18/Solid-Relevance.html.\n\n\n———. 2014. “SOLID Principles of Objetc Oriented & AGILE Design (Video).” https://www.youtube.com/watch?v=TMuno5RZNeE.\n\n\n———. 2018. Clean Architecture: A Craftsman’s Guide to Software Structure and Design. Pearson Education, 1st edition. https://www.pearson.com/us/higher-education/program/Martin-Clean-Architecture-A-Craftsman-s-Guide-to-Software-Structure-and-Design/PGM333762.html.\n\n\nMatey-Sanz, Miguel, Carlos Granell-Canut, and Ramón A. Mollineda Cárdenas. 2024. “Estrategias de Control y Seguimiento Activo de Proyectos de Desarrollo de Software.” In Actas de Las Jornadas Sobre Enseñanza Universitaria de La Informática (JENUI), 9:165–72. AENUI. https://aenui.org/actas/pdf/JENUI_2024_021.pdf.\n\n\n———. 2025. “La IA Generativa Como Acompañante En El Ciclo de Vida Del Software.” In Actas de Las Jornadas Sobre Enseñanza Universitaria de La Informática (JENUI), 10:45–53. AENUI. https://aenui.org/actas/fichas/JENUI_2025_005.html.\n\n\nMilignton, Sam. 2022. “A Solid Guide to SOLID: Principles.” https://www.baeldung.com/solid-principles.\n\n\nNogueira, Ricardo. 2022. “4+2 Layered Architecture: Separation of Concerns Applied to Software Architecture.” Medium. https://medium.com/@nogueira.cc/4-2-layered-architecture-313329082989.\n\n\nNormand, Eric. 2021. Grokking Simplicity: Taming Complex Software with Functional Thinking. Manning.\n\n\nOloruntoba, Samuel. 2021. “SOLID: The First 5 Principles of Object Oriented Design.” https://www.digitalocean.com/community/conceptual-articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design.\n\n\nRichards, Mark, and Neal Ford. 2020. Fundamentals of Software Architecture, 1st Edition. O’Really Media Inc.\n\n\nRodríguez Pupo, Luis Enrique. 2021. “An Analytics Platform for Integrating and Computing Spatio-Temporal Metrics in Location-Aware Games.” PhD thesis, Universitat Jaume I. Escola de Doctorat. https://doi.org/10.6035/14101.2021.357562.\n\n\nShvets, Alexander. 2019. Sumérgete En Los Patrones de Diseño. Refactoring.Guru. https://refactoring.guru/design-patterns/book.\n\n\nSoysal, Berke. 2022. “SOLID Principles with (Almost) Real-Life Examples in Java.” https://betterprogramming.pub/solid-principles-with-almost-real-life-examples-in-java-b292a4e2c18b.\n\n\nTai, Alan. 2022. “What It Takes to Become a Software Architect.” Medium. https://ayltai.medium.com/what-it-takes-to-become-a-software-architect-fa7788962c8c.\n\n\nWickham, Hadley. 2019. Advanced r. CRC Press; 2nd Edition. https://adv-r.hadley.nz/index.html.\n\n\nWilson, Greg. 2019. Teaching Tech Together: How to Make Lessons That Work and Build a Teaching Community Around It. Taylor & Francis. https://teachtogether.tech/.\n\n\nXie, Y. 2019. Bookdown: Authoring Books and Technical Documents with R Markdown. CRC Press. https://bookdown.org/yihui/bookdown/.\n\n\nXie, Y, JJ Allaire, and G Grolemund. 2018. R Markdown: The Definitive Guide. CRC Press. https://bookdown.org/yihui/rmarkdown/.",
    "crumbs": [
      "Extras",
      "Referencias"
    ]
  },
  {
    "objectID": "materials/02-solid-slides.html#section",
    "href": "materials/02-solid-slides.html#section",
    "title": "Principios SOLID",
    "section": "",
    "text": "¿Cómo reconocemos que el aire es de baja calidad? ¿Que síntomas observamos?\nPollution collage element, torn paper design Image credits: Rawpixel.com"
  },
  {
    "objectID": "materials/02-solid-slides.html#section-1",
    "href": "materials/02-solid-slides.html#section-1",
    "title": "Principios SOLID",
    "section": "",
    "text": "¿Cómo reconocemos código “malo”? ¿Nos sirven los principios básicos d ediseño de software? ¿Qué pasa cuando se modifica código malo? Síntomas del código malo: dependencia, fragilidad, rigidez, falta de reutilización o inmobilidad, viscosidad, etc.\nSoftware developer programming code on black background Image credits: Rawpixel.com"
  },
  {
    "objectID": "materials/02-solid-slides.html#concepto",
    "href": "materials/02-solid-slides.html#concepto",
    "title": "Principios SOLID",
    "section": "Concepto",
    "text": "Concepto\n5 principios SOLID del diseño OO para que el software sea más comprensible, flexible y fácil de mantener (Martin 2002)\n\n\nreducen la complejidad de sistemas/aplicaciones a medida que crecen y\nprevienen los síntomas del código malo\n\n\n\nReceta contra los síntomas del código malo.\nPrincipios SOLID introducidos por Robert Martin (Uncle Bob) en 2000: Design Principles and Design Patterns\nSOLID: The First 5 Principles of Object Oriented Design | DigitalOcean"
  },
  {
    "objectID": "materials/02-solid-slides.html#srp",
    "href": "materials/02-solid-slides.html#srp",
    "title": "Principios SOLID",
    "section": "Single Responsability Principle - Principo de responsabilidad única",
    "text": "Single Responsability Principle - Principo de responsabilidad única\nUna clase debería tener un único propósito\nUna clase debería tener una (buena) razón para cambiar.\nSi hace demasiadas tareas, hay que modificarla cada vez que una de esas tareas cambia.\n\n✔️ Principo de diseño encapsulación\n\nJunta las tareas que cambian por las mismas razones en una clase\nSepara las tareas que cambian por diferentes razones en clases distintas\n\n✔️ Reduce complejidad, fácil entender qué hace una clase\n\nReduce complejidad: Si una clase hace demasiadas cosas, hay que cambiarla cada vez que una de esas cosas cambia\nEasier to understand: Classes, software components and microservices that have only one responsibility are much easier to explain, understand and implement than the ones that provide a solution for everything. This reduces the number of bugs, improves your development speed, and makes your life as a software developer a lot easier\nhttps://stackify.com/solid-design-principles/"
  },
  {
    "objectID": "materials/02-solid-slides.html#ocp",
    "href": "materials/02-solid-slides.html#ocp",
    "title": "Principios SOLID",
    "section": "Open/Closed Principle - Principio de abierto/cerrado",
    "text": "Open/Closed Principle - Principio de abierto/cerrado\n✔️ Cerrada a la modificación: Si una clase está desarrollada, probada y revisada, no la reescribas para añadir nuevas funcionalidades\n✔️ Abierta a la extensión: Si necesitas nuevo comportamiento, crea subclases\n✔️ Principo de diseño interfaz\n\nExtender una clase permite añadir nuevo comportamiento sin descomponer clientes existentes de la clase original\n\n\nAbierta y cerrada no son mutuamente excluyentes. Una clase puede estar al mismo tiempo abierta (para la extensión) y cerrada (para la modificación). El código simple es tanto abierto y cerrado.\nOf course, the one exception to the rule is when fixing bugs in existing code.\nhttps://stackify.com/solid-design-open-closed-principle/"
  },
  {
    "objectID": "materials/02-solid-slides.html#lsp",
    "href": "materials/02-solid-slides.html#lsp",
    "title": "Principios SOLID",
    "section": "Liskov Substitution Principle - Principio de sustitución de Liskov",
    "text": "Liskov Substitution Principle - Principio de sustitución de Liskov\nSi la clase A es un subtipo de la clase B, deberíamos poder reemplazar B por A sin descomponer el comportamiento de nuestro programa\n\n✔️ Principio de diseño del sentido común (OO)\n\nEscribe abstracciones claras y bien definidas\nSubclases deben ser compatibles con (el comportamiento) de la clase padre\nAl sobrescribir un método, extiende el comportamiento base en lugar de sustituirlo por algo totalmente distinto\n\n\nEscribe abstracciones nítidas, claras y bien definidas.\nhttps://stackify.com/solid-design-liskov-substitution-principle/"
  },
  {
    "objectID": "materials/02-solid-slides.html#isp",
    "href": "materials/02-solid-slides.html#isp",
    "title": "Principios SOLID",
    "section": "Interface Segregation Principle - Principio de segregación de la interfaz",
    "text": "Interface Segregation Principle - Principio de segregación de la interfaz\nInterfaces que fuerzan a las clases (implementaciones) a que implementen métodos que no necesitan\n\n✔️ No forzar a clientes (implementaciones) que dependan de métodos que no utilizan\n✔️ Si una interfaz es demasiado grande, sepárala en varias interfaces más pequeñas, para que sean funcionalmente más concisas\n\nhttps://stackify.com/interface-segregation-principle/"
  },
  {
    "objectID": "materials/02-solid-slides.html#dip",
    "href": "materials/02-solid-slides.html#dip",
    "title": "Principios SOLID",
    "section": "Dependency Inversion Principle - Principio de inversión de dependencia",
    "text": "Dependency Inversion Principle - Principio de inversión de dependencia\nClases de alto nivel (componentes, servicios) no deben depender de clases de bajo nivel.\n\n✔️ Desacoplamiento de módulos/componentes/clases\n✔️ Principo de diseño composición\n\nComponentes/entidades deben depender de abstracciones, no de implementaciones\n\n\nClases de bajo nivel implementan operaciones básicas como transferir datos por la red.\nClases de alto nivel contienen la lógica de negocio que indican a las clases de bajo nivel que hagan algo.\nEl uso del operador new crea dependencias fuertes entre clases.\nhttps://stackify.com/dependency-inversion-principle/"
  },
  {
    "objectID": "materials/02-solid-slides.html#solid-con-ejemplos",
    "href": "materials/02-solid-slides.html#solid-con-ejemplos",
    "title": "Principios SOLID",
    "section": "SOLID con ejemplos",
    "text": "SOLID con ejemplos\n\n(Milignton 2022): Ejemplos claros y sencillos en Java para entender los principios SOLID.\n(Oloruntoba 2021) y (Soysal 2022) proporcionan más ejemplos.\n(Martin 2014): Charla de Robert Martín (creador principios) in Yale"
  },
  {
    "objectID": "materials/02-patrones-slides.html#section",
    "href": "materials/02-patrones-slides.html#section",
    "title": "Patrones de Diseño",
    "section": "",
    "text": "Los patrones de diseño son…"
  },
  {
    "objectID": "materials/02-patrones-slides.html#section-1",
    "href": "materials/02-patrones-slides.html#section-1",
    "title": "Patrones de Diseño",
    "section": "",
    "text": "…soluciones habituales y bien testeadas a problemas recurrentes en diseño de software"
  },
  {
    "objectID": "materials/02-patrones-slides.html#gang-of-four",
    "href": "materials/02-patrones-slides.html#gang-of-four",
    "title": "Patrones de Diseño",
    "section": "Gang of Four",
    "text": "Gang of Four\nLos cuatro autores del libro Design Patterns: Elements of Reusable Object-Oriented Software (Gamma et al. 1994)\n\n\nTodos eran desarrolladores de aplicaciones e interfaces gráficas.\nDescubrieron patrones que surgían en sus soluciones de diseño.\nFormalizaron esos patrones en este libro clásico."
  },
  {
    "objectID": "materials/02-patrones-slides.html#patrones-creacionales",
    "href": "materials/02-patrones-slides.html#patrones-creacionales",
    "title": "Patrones de Diseño",
    "section": "Patrones creacionales",
    "text": "Patrones creacionales\nProporcionan mecanismos de creación de objetos\n\n\nFactory Method\nAbstract Factory\nBuilder\nPrototype\nSingleton"
  },
  {
    "objectID": "materials/02-patrones-slides.html#patrones-estructurales",
    "href": "materials/02-patrones-slides.html#patrones-estructurales",
    "title": "Patrones de Diseño",
    "section": "Patrones estructurales",
    "text": "Patrones estructurales\nExplican cómo ensamblar (o como están conectados) objetos y clases en estructuras más grandes (como maridaje culinario).\n\n\n\n\nAdapter\nBridge\nComposite\nDecorator\n\n\n\n\n\nFacade\nFlyweight\nProxy\n\n\n\n\nAnalogía para los estructural es el maridaje culinario: juntamos ingrediantes de distintas formas para formar nuevas relacionas, ya sea combinando ingredientes físicalmente (ensalada) o sin combinación (queso y vino)"
  },
  {
    "objectID": "materials/02-patrones-slides.html#patrones-de-comportamiento",
    "href": "materials/02-patrones-slides.html#patrones-de-comportamiento",
    "title": "Patrones de Diseño",
    "section": "Patrones de comportamiento",
    "text": "Patrones de comportamiento\nSe encargan de una comunicación efectiva y la asignación de responsabilidades entre objetos (como equipo F1).\n\n\n\n\nChain of responsability\nCommand\nIterator\nMediator\nMemento\n\n\n\n\n\nObserver\nState\nStrategy\nTemplate Method\nVisitor\n\n\n\n\nUna analogía para los patrones de comportamiento es el pit/box en una carrera de F1: cada miembro del equipo tiene un rol asignado, pero juntos consiguen un objetivo común"
  },
  {
    "objectID": "materials/02-patrones-slides.html#encapsula",
    "href": "materials/02-patrones-slides.html#encapsula",
    "title": "Patrones de Diseño",
    "section": "",
    "text": "⭐Encapsula lo que varía y sepáralo de lo que no cambia\n\n\n➡️Minimiza/aisla el efecto provocado por los cambios\n\n\nStones Wooden Table Group of Objects Concept Image credits: Rawpixel.com"
  },
  {
    "objectID": "materials/02-patrones-slides.html#interfaz",
    "href": "materials/02-patrones-slides.html#interfaz",
    "title": "Patrones de Diseño",
    "section": "",
    "text": "⭐Programa a una interfaz, no a una implementación\n\n\n➡️Diseño flexible depende de abstracciones, no de clases concretas"
  },
  {
    "objectID": "materials/02-patrones-slides.html#composicion",
    "href": "materials/02-patrones-slides.html#composicion",
    "title": "Patrones de Diseño",
    "section": "",
    "text": "⭐Favorece la composición sobre la herencia\n\n\n➡️HAS-A puede ser mejor que IS-A\n\n\nLa herencia es probablemente la forma más obvia de reutilizar código entre clases. Tienes dos clases con el mismo código. Creas una clase base común para estas dos clases y colocas dentro el código similar. Fet!\nSin embargo, la herencia establece despendencias fuertes entre clases. Puedes hacer más débil una dependencia haciendo que tu código dependa de interfaces o clases abstractas en lugar de clases concretas.\nEn vez de heredar un comportamiento, un objeto obtiene un comportamiento cuando se compone con un objeto de ese comportamiento."
  },
  {
    "objectID": "materials/02-patrones-slides.html#puedo-trabajar-como-programador-sin-conocer-un-solo-patrón-de-diseño",
    "href": "materials/02-patrones-slides.html#puedo-trabajar-como-programador-sin-conocer-un-solo-patrón-de-diseño",
    "title": "Patrones de Diseño",
    "section": "¿Puedo trabajar como programador sin conocer un solo patrón de diseño?",
    "text": "¿Puedo trabajar como programador sin conocer un solo patrón de diseño?\n\nSí, puedes. A lo mejor los has utilizado sin saberlo."
  },
  {
    "objectID": "materials/02-patrones-slides.html#por-qué-tengo-que-dedicar-tiempo-a-aprenderlos",
    "href": "materials/02-patrones-slides.html#por-qué-tengo-que-dedicar-tiempo-a-aprenderlos",
    "title": "Patrones de Diseño",
    "section": "¿Por qué tengo que dedicar tiempo a aprenderlos?",
    "text": "¿Por qué tengo que dedicar tiempo a aprenderlos?\n\nComo ingenieros/as, proporcionamos soluciones a problemas. Cuanto mayor sea tu juego de herramientas para resolver problemas, mejor ingeniero/a serás."
  },
  {
    "objectID": "materials/02-patrones-slides.html#si-aplico-un-patrón-copio-su-código-y-listo",
    "href": "materials/02-patrones-slides.html#si-aplico-un-patrón-copio-su-código-y-listo",
    "title": "Patrones de Diseño",
    "section": "Si aplico un patrón, ¿copio su código y listo?",
    "text": "Si aplico un patrón, ¿copio su código y listo?\n\nLos patrones no son código ya preparado como funciones o algoritmos. Son soluciones conceptuales para resolver un problema frecuente de diseño en tu código.\n\n\n\n\n\n\nRecuerda\n\n\npatrón ≌ plano\n\n\n\n\nUn algoritmo == una receta de cocina: ambos cuentan con pasos claros para alcanzar una meta.\nUn patrón == un plano, ya que puedes observar el resultado y sus funciones, pero el orden exacto de la implementación depende de ti."
  },
  {
    "objectID": "materials/02-patrones-slides.html#y-entonces-cómo-implemento-un-patrón-en-mi-código",
    "href": "materials/02-patrones-slides.html#y-entonces-cómo-implemento-un-patrón-en-mi-código",
    "title": "Patrones de Diseño",
    "section": "Y entonces, ¿cómo implemento un patrón en mi código?",
    "text": "Y entonces, ¿cómo implemento un patrón en mi código?\n\nSigue los detalles de la solución conceptual del patrón pero la implementación depende de ti, para que encaje con las restricciones y objetivo de tu código."
  },
  {
    "objectID": "materials/02-patrones-slides.html#lo-más-difícil-entonces-es-implementar-una-versión-personalizada-del-patrón",
    "href": "materials/02-patrones-slides.html#lo-más-difícil-entonces-es-implementar-una-versión-personalizada-del-patrón",
    "title": "Patrones de Diseño",
    "section": "¿Lo más difícil entonces es implementar una versión personalizada del patrón?",
    "text": "¿Lo más difícil entonces es implementar una versión personalizada del patrón?\n\nNo, esa es la parte “mecánica” (sin despreciar la dificultad que atañe escribir código)."
  },
  {
    "objectID": "materials/02-patrones-slides.html#qué-es-lo-más-difícil",
    "href": "materials/02-patrones-slides.html#qué-es-lo-más-difícil",
    "title": "Patrones de Diseño",
    "section": "¿Qué es lo más difícil? 😨",
    "text": "¿Qué es lo más difícil? 😨\n\nReconocer si un patrón en particular es o no es la solución a tu problema particular"
  },
  {
    "objectID": "materials/02-patrones-slides.html#y-además-los-patrones-definen-un-vocabulario-común-para-comunicarte-con-tu-equipo",
    "href": "materials/02-patrones-slides.html#y-además-los-patrones-definen-un-vocabulario-común-para-comunicarte-con-tu-equipo",
    "title": "Patrones de Diseño",
    "section": "Y además los patrones definen un vocabulario común para comunicarte con tu equipo",
    "text": "Y además los patrones definen un vocabulario común para comunicarte con tu equipo\n\n“Sí, claro, utiliza un singleton para eso que quieres hacer”."
  },
  {
    "objectID": "materials/02-patrones-slides.html#resumen",
    "href": "materials/02-patrones-slides.html#resumen",
    "title": "Patrones de Diseño",
    "section": "Resumen",
    "text": "Resumen\n\n\nSoluciones conceptuales muy probadas y testeadas\nProporcionan un vocabulario común\nNo es siempre obvio qué patrón utilizar\nNo abuses de los patrones si existe una solución más sencilla"
  },
  {
    "objectID": "materials/02-patrones-creacionales.html",
    "href": "materials/02-patrones-creacionales.html",
    "title": "Patrones creacionales",
    "section": "",
    "text": "Definición\n\n\n\nLos patrones creacionales proporcionan mecanismos de creación de objetos que incrementan la flexibilidad y la reutilización del código.\n\n\nLas secciones relativas a los patrones creacionales se dividen en los mismos apartados, tal como reflejan los mapas conceptuales:\n\nPropósito (aim)\nProblema (what problem does it solve?)\nSolución (conceptual solution)\nVentajas e inconvenientes (pros and cons)\n\nDejamos para la argumentación y discusión en clase la tarea de conectar y relacionar los distintos patrones creacionales entre ellos, y sugerir situaciones o aplicaciones donde se puedan aplicar.\n\nSingleton\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nasegura que una clase tenga una única instancia y proporciona un punto de acceso global a dicha instancia\n… porque quiero centralizar o controlar el acceso a un recurso.\n\n\n\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Singleton en Java (refactoring.guru)\n\n\n\n\nFactory method\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\ncrea objetos sin especificar las clases concretas\n… porque quiero crear objetos especializados en tiempo de ejecución\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nFactory objects & Factory Method pattern\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Factory Method en Java (refactoring.guru)\n\n\n\n\nAbstract Factory\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nagrupa factorias relacionadas temáticamente sin especificar las clases concretas\n… porque quiero crear familias de objetos especializados en tiempo de ejecución\n\n\n\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Abstract Factory en Java (refactoring.guru)\n\n\n\n\nBuilder\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\ncrea objetos complejos separando el proceso de construcción de su representación\n… porque tengo clases constructuras con muchos argumentos\n\n\n\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Builder en Java (refactoring.guru)\n\n\n\n\nPrototype\n\n\nRelaciones entre patrones\n\n\nAplicabilidad",
    "crumbs": [
      "Patrones de diseño",
      "Patrones creacionales"
    ]
  },
  {
    "objectID": "materials/01-arquitectura.html",
    "href": "materials/01-arquitectura.html",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "El término arquitectura tiene multiples significados según el contexto. En ingeniería de software/sistemas, ¿de qué hablamos cuando decimos arquitectura software?\n\n¿Nos referimos a una aplicación móvil?\n¿A una librería software?\n¿O una aplicación empresarial?\n¿Tal vez una red de sensores desplegados en la ciudad junto a un centro (hub) de datos?\n¿O simplemente el conjunto de diagramas de clases u casos de usos asociados?\n¿Una red de data centers como los que posee Meta, Google, etc.?\n\nEs importante definir, o al menos caracterizar, qué implica el diseño y desarrollo de una arquitectura de software. Especialmente si queremos dedicarnos al desarrollo de arquitecturas de software en el futuro. ¿Lo has pensado como profesión?\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nConceptos, roles y compromisos",
    "crumbs": [
      "Fundamentos de arquitectura"
    ]
  },
  {
    "objectID": "materials/01-arquitectura.html#qué-es-una-arquitectura-de-software",
    "href": "materials/01-arquitectura.html#qué-es-una-arquitectura-de-software",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "El término arquitectura tiene multiples significados según el contexto. En ingeniería de software/sistemas, ¿de qué hablamos cuando decimos arquitectura software?\n\n¿Nos referimos a una aplicación móvil?\n¿A una librería software?\n¿O una aplicación empresarial?\n¿Tal vez una red de sensores desplegados en la ciudad junto a un centro (hub) de datos?\n¿O simplemente el conjunto de diagramas de clases u casos de usos asociados?\n¿Una red de data centers como los que posee Meta, Google, etc.?\n\nEs importante definir, o al menos caracterizar, qué implica el diseño y desarrollo de una arquitectura de software. Especialmente si queremos dedicarnos al desarrollo de arquitecturas de software en el futuro. ¿Lo has pensado como profesión?\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nConceptos, roles y compromisos",
    "crumbs": [
      "Fundamentos de arquitectura"
    ]
  },
  {
    "objectID": "materials/01-arquitectura.html#características-de-la-arquitectura-de-software",
    "href": "materials/01-arquitectura.html#características-de-la-arquitectura-de-software",
    "title": "Fundamentos de arquitectura",
    "section": "Características de la arquitectura de software",
    "text": "Características de la arquitectura de software\nSegún (Richards and Ford 2020), las dimensiones de una arquitecrua de software son:\n\nEstructura o estilo\nCaracterísticas\nDecisiones o reglas\nPrincipios de diseño\n\nAhora nos cetramos en la dimensión de características de la arquitectura, donde se engloban todos aquellos criterios y requisitos no funcionales (nombres terminaddos en idad, como seguridad, fiabilidad, escalabildiad, etc.) para garantizar el correcto y deseable funcionamiento de un sistema.\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nCaracterísticas",
    "crumbs": [
      "Fundamentos de arquitectura"
    ]
  },
  {
    "objectID": "materials/01-arquitectura.html#estructura-de-la-arquitectura-de-software",
    "href": "materials/01-arquitectura.html#estructura-de-la-arquitectura-de-software",
    "title": "Fundamentos de arquitectura",
    "section": "Estructura de la arquitectura de software",
    "text": "Estructura de la arquitectura de software\nLa estructura o el estilo es otra dimensión de la arquitectura de software (Richards and Ford 2020). Quizás mucho más conocida y popular, y precisamente por eso, existe la errónea tendencia a reducir la arquitectura de software únicamente a la dimensión de la estructura o el estilo. Hablamos de arquitectura en capas o basada en microservicios, como si la estructura en sí misma abarcara toda la complejidad de una arquitectura de software.\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nEstilos de arquitectura",
    "crumbs": [
      "Fundamentos de arquitectura"
    ]
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#requisitos",
    "href": "materials/01-arquitectura-caracteristicas.html#requisitos",
    "title": "Fundamentos de arquitectura",
    "section": "Requisitos",
    "text": "Requisitos\nTodo lo que el software a desarrollar debe hacer\n\n\n\nRequisitos funcionales o de negocio\n\nRequisitos no funcionales\n características de la arquitectura\n\n\n\n\n\n\n\n\n\nRecuerda\n\n\nUn/a arquitecto/a considera tanto los requisitos funcionales como las características de la arquitectura."
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#libro-de-referencia",
    "href": "materials/01-arquitectura-caracteristicas.html#libro-de-referencia",
    "title": "Fundamentos de arquitectura",
    "section": "Libro de referencia",
    "text": "Libro de referencia\n\n\n\n\nBy Mark Richards and Neal Ford\nJanuary 2020\nCapítulos 4 y 5 (Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#section",
    "href": "materials/01-arquitectura-caracteristicas.html#section",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "Software Architecture “-ilities”: I probably won’t be able to see quality attributes by just looking at the high-level design diagram with some lines connecting to some boxes\nImage credits: (Tai 2022)"
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#operacionales",
    "href": "materials/01-arquitectura-caracteristicas.html#operacionales",
    "title": "Fundamentos de arquitectura",
    "section": "Operacionales",
    "text": "Operacionales\n\n\nAvailability/Disponibilidad: cuánto tiempo deberá estar disponible el sistema\nContinuity/Continuidad: capacidad de recuperación ante desastres\nPerformance/Rendimiento: pruebas de estrés, análisis de picos, análisis de la frecuencia de las funciones utilizadas, capacidad requerida y tiempos de respuesta\nReliability/Fiabilidad: Sistema a prueba de fallos\nRobustness/Robustez: Habilidad para manejar condiciones límite y de error (fallo hw)\nScalability/Escalabilidad: Capacidad para gestionar un numero creciente de usuarios/solicitudes sin degradar rendimiento\nElasticity/Elasticidad: Capacidad para gestionar picos masivos de usuarios/solicitudes\n\n\n\nContinuity/continuidad = Recoverability/recuperabilidad"
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#estructurales",
    "href": "materials/01-arquitectura-caracteristicas.html#estructurales",
    "title": "Fundamentos de arquitectura",
    "section": "Estructurales",
    "text": "Estructurales\n\n\nConfigurability/Configurabilidad: cambiar fácilmente aspectos de la configuración del software\nExtensibility/Extensibilidad: Importancia de añadir nuevas funcionalidades\nInstallability/Instalabilidad: Facilidad de instalación del sistema en las plataformas necesarias.\nReuse/Reutilización: Capacidad para aprovechar componentes comunes en múltiples productos\nI18n: Soporte para múltiples idiomas; unidades de medida; monedas"
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#transversales",
    "href": "materials/01-arquitectura-caracteristicas.html#transversales",
    "title": "Fundamentos de arquitectura",
    "section": "Transversales",
    "text": "Transversales\n\n\nMaintainability/Mantenibilidad: Facilidad de aplicar cambios y mejorar el sistema\nPortability/Portabilidad: ¿Es necesario que el sistema se ejecute en más de una plataforma?\nSupportability/Soporte: ¿Qué nivel de soporte técnico (logging) necesita la aplicación?\nUpgradeability/Actualización: Capacidad para actualizar rápidamente desde una versión anterior a una versión más nueva en servidores y clientes."
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#section-1",
    "href": "materials/01-arquitectura-caracteristicas.html#section-1",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "¡La mayoría de estas características no estan explícitamente descritas en los requisitos!"
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#section-2",
    "href": "materials/01-arquitectura-caracteristicas.html#section-2",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "#1 Selecciona las justas.\n➡️ No diseñes a generic architecture\n\nCada característica que añades complicará el diseño global del sistema. Mantén la lista corta!\nHelpful Tips Information Knowledge Concept. Image credits: Rawpixel.com"
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#section-3",
    "href": "materials/01-arquitectura-caracteristicas.html#section-3",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "#2 Existen compromisos opuestos entre características.\n➡️ Todo es compromiso\n(First Law of Software Architecture)\n\nPor ejemplo, rendimiento vs seguridad. Aumentar la seguridad de un sistema, puede degradar su rendimiento.\nHelpful Tips Information Knowledge Concept. Image credits: Rawpixel.com"
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#section-4",
    "href": "materials/01-arquitectura-caracteristicas.html#section-4",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "#3 Nunca busques la mejor arquitectura,\n➡️ sino la menos mala.\n\n¿Sabes? la architectura, como el software, cambiará en el futuro. Diseña para que esos cambios sean fáciles en el futuro.\nHelpful Tips Information Knowledge Concept. Image credits: Rawpixel.com"
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#section-5",
    "href": "materials/01-arquitectura-caracteristicas.html#section-5",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "Escucha a los stakeholders\n\nEntiende su lenguaje\n\n\nEvita el problema lost in translation\n\n\nTraduce sus peticiones en características\n\nPeople meeting and brainstorming for a project. Image credits: Rawpixel.com"
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#si-los-stakeholders-hablan-de",
    "href": "materials/01-arquitectura-caracteristicas.html#si-los-stakeholders-hablan-de",
    "title": "Fundamentos de arquitectura",
    "section": "Si los stakeholders hablan de…",
    "text": "Si los stakeholders hablan de…\n…adquisiciones y fusiones\n\nInteroperability + scalability + adaptability + extensibility\n\n\n…reducir tiempos para llegar al mercado\n\nAgility + testability + deployability\n\n\n\n…incrementar la satisfacción del usuario\n\nPerformance + availability + testability + security\n\n\n\n…presupuesto limitado\n\nSimplicity + feasibility"
  },
  {
    "objectID": "materials/01-arquitectura-caracteristicas.html#warren-buffetts-255-rule",
    "href": "materials/01-arquitectura-caracteristicas.html#warren-buffetts-255-rule",
    "title": "Fundamentos de arquitectura",
    "section": "Warren Buffett’s 25/5 Rule",
    "text": "Warren Buffett’s 25/5 Rule\nEstrategia de productividad en 3 pasos\n\n\nEscribe los 25 objetivos para tu carrera/profesión\nMarca las 5 más importantes\nDescarta las otras 20. No requieren tu atención hasta que hayas tenido éxito con las top5\n\n\n\n\n\n\n\n\n\nTip\n\n\nDeja que los stakeholders sean los que determinen las 3 ó 5 características esenciales"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Estás en la EI1039",
    "section": "",
    "text": "Según el SIA,\n\n“la asignatura Diseño de Software se imparte en el primer semestre de cuarto curso del grado en Ingeniería Informática de la Universitat Jaume I, como parte del itinerario de Ingeniería del Software. El objetivo de esta asignatura es proporcionar al alumnado conocimientos y habilidades sobre las distintas etapas del diseño del software dentro del proceso de desarrollo.”\n\nY al finalizar satisfactoriamente la EI1039, deberías ser capaz de:\n\nComparar las distintas estrategias que se pueden utilizar en el diseño de un sistema software.\nSeleccionar, aplicar y evaluar patrones de arquitectura y diseño adecuados a la resolución de un determinado problema de desarrollo del software.\nDiseñar y evaluar la interfaz de usuario utilizando principios y técnicas propias de la interacción persona-computador.\n\nTan importantes, o incluso más, que los resultados de aprendizaje mencionados anteriormente son las competencias blandas o habilidades interpersonales (soft skills), como la comunicación, el trabajo en equipo, la síntesis de información, la toma de decisiones, la resolución de conflictos, la gestión del tiempo, y el liderazgo. Trabajaremos en estas competencias o habilidades a lo largo del curso porque, aunque parezca increíble, son aspectos vitales del día a día de un arquitecto/a o diseñador/a de software.\nArquitectura software, patrones de diseño, comunicación, trabajo en equipo, …. Suena bien, ¿no? Espero que encuentres atractivo e interesante el contenido de la asignatura a lo largo del semestre."
  },
  {
    "objectID": "index.html#objetivo-y-resultados-de-aprendizaje",
    "href": "index.html#objetivo-y-resultados-de-aprendizaje",
    "title": "Estás en la EI1039",
    "section": "",
    "text": "Según el SIA,\n\n“la asignatura Diseño de Software se imparte en el primer semestre de cuarto curso del grado en Ingeniería Informática de la Universitat Jaume I, como parte del itinerario de Ingeniería del Software. El objetivo de esta asignatura es proporcionar al alumnado conocimientos y habilidades sobre las distintas etapas del diseño del software dentro del proceso de desarrollo.”\n\nY al finalizar satisfactoriamente la EI1039, deberías ser capaz de:\n\nComparar las distintas estrategias que se pueden utilizar en el diseño de un sistema software.\nSeleccionar, aplicar y evaluar patrones de arquitectura y diseño adecuados a la resolución de un determinado problema de desarrollo del software.\nDiseñar y evaluar la interfaz de usuario utilizando principios y técnicas propias de la interacción persona-computador.\n\nTan importantes, o incluso más, que los resultados de aprendizaje mencionados anteriormente son las competencias blandas o habilidades interpersonales (soft skills), como la comunicación, el trabajo en equipo, la síntesis de información, la toma de decisiones, la resolución de conflictos, la gestión del tiempo, y el liderazgo. Trabajaremos en estas competencias o habilidades a lo largo del curso porque, aunque parezca increíble, son aspectos vitales del día a día de un arquitecto/a o diseñador/a de software.\nArquitectura software, patrones de diseño, comunicación, trabajo en equipo, …. Suena bien, ¿no? Espero que encuentres atractivo e interesante el contenido de la asignatura a lo largo del semestre."
  },
  {
    "objectID": "index.html#método-de-instrucción",
    "href": "index.html#método-de-instrucción",
    "title": "Estás en la EI1039",
    "section": "Método de instrucción",
    "text": "Método de instrucción\n\n\n\n\n\n\n¿Te has preguntado alguna vez qué pasa en tu cerebro cuando aprendes? (Lang 2016)\n\n\n\nTenemos millones de neuronas que “hacen amigos fácilmente”. Las neuronas se conectan con otras neuronas con cada nueva experiencia que tenemos (nuevas emociones, pensamientos, acciones, conocimiento, etc.) formando redes. Las redes al principio son débiles, pero cada vez que repetimos la experiencia o acción, el camimo de la red se consolida y se hace más fuerte. Cuando aprendemos, nuestro cerebro cambia por la formación de nuevas conexiones entre neuronas.\n¿Quieres saber más? 10 Things Software Developers Should Learn about Learning (Brown, Hermans, and Margulieux 2023)\n\n\n\n\n\n\n\n\nPirámide Bloom\n\n\n\nCuando reflexionamos y aplicamos (en contraposición a simplemente leer o subrayar, ver Figure 1) cierto conocimiento a contextos nuevos, lo comprendemos más profundamente, provocando que la red sea más densa y tenga conexiones con otras redes. La differencia entre la red de un principiante y la de un experto radica justamente en el número y densidad de conexiones. Cuanto más interconexiones, mayor comprensión.\n\n\n\n\n\n\nFigure 1: Taxonomía de Bloom\n\n\n\n\n\nSi esperas presentaciones largas y densas por mi parte todos los viernes por la tarde, entonces creo que te has matriculado de la asignatura equivocada. 😁🍻\nHay evidencia científica de sobra que demuestra una y otra vez que los métodos de aprendizaje activo (por activo me refiero a todos, tanto dentro como fuera de clase) son mucho más efectivos que escucharme y tomar apuntes de forma pasiva. Vale, es cierto que a veces son necesarias presentaciones aclaratorias; pero tú debes ser el protagonista (y no yo) de tu propio proceso de aprendizaje para alcanzar los resultados esperados con éxito. Por lo tanto, esta asignatura mezcla diversas estrategias de aprendizaje, algunas más tradicionales como presentaciones cuando sea necesario combinadas con estrategias de apredizaje colaborativas y activas para trabajo en grupo, exploración y aplicación de conceptos, y competencias de proceso (o process skills), como por ejemplo Flipped Classroom (lecturas y ejercicios básicos fuera del aula que requieren competencias cognitivas bajas, con análisis y resolución de problemas en aula que requiren competencias cognitivas altas).\nPara que te hagas una idea, una semana típica de clase de teoría podría ser así:\n\nHasta el miércoles (a las 9:00): Fecha límite para entregar las actividades previas a la siguiente clase de teoría de forma individual en el Aula Virtual.\nViernes (en aula): Comentamos las actividades previas, junto con presentaciones y actividades en clase.\n\nLas asignaturas EI1039 (Diseño de software) y EI1048 (Paradigmas de Software) están muy relacionadas, ya que son dos caras de la misma moneda a la hora de diseñar y desarrollar aplicaciones avanzadas. Para facilitar el aprendizaje de las competencias de ambas asignaturas, el profesorado nos hemos organizado y coordinado para proponerte un proyecto común que viene detallado en un documento separado colgado en el Aula Virtual de las dos asignaturas. Las clases de laboratorio (LA) de la EI1039 y de la EI1048 son de trabajo (en grupo) para el desarrollo del proyecto común.\nLlevamos varios años colaborando entre el profesorado de ambas asignaturas y presentando los resultados en foros sobre educación universitaria en informática (JENUI):\n\n(González-Pérez, Cárdenas, and Llorens Piñana 2021),\n(González-Pérez, Granell-Canut, and Cárdenas 2022),\n(Matey-Sanz, Granell-Canut, and Cárdenas 2024) y\n(Matey-Sanz, Granell-Canut, and Cárdenas 2025).\n\nEn la edición de la JENUI 2024, se reconoció nuestro trabajo en (Matey-Sanz, Granell-Canut, and Cárdenas 2024) con el premio SISTEDES al mejor trabajo sobre ingeniería del software."
  },
  {
    "objectID": "index.html#materiales-y-contenido",
    "href": "index.html#materiales-y-contenido",
    "title": "Estás en la EI1039",
    "section": "Materiales y contenido",
    "text": "Materiales y contenido\nLos materiales del curso relativos a Teoria (TE) están disponibles en el Aula Virtual, organizados por semanas. Obviamente, el AV enlaza con este sitio web de la asignatura. Desde el punto de vista del estudiantes, es conveniente tener tanto el AV como este sitio web abiertos.\nEn el Aula Virtual de la asignatura se especifican las actividades previas a título individual que se entregan a través de tareas correspondientes. Voy a utilizar el Aula Virtual para proporcionarte feedback sobre las actividades propuestas, para anuncios de la asignatura y, en definitiva, para cualquier tipo de comunicación oficial. Agradecería enormemente que todas las comunicaciones entre nosotros relativas a la asignatura fueran canalizadas a través del Aula Virtual, y no a través de mi correo personal.\nLa asignatura también consta de sesiones de seminarios (SE) donde exploraremos temas adicionales al diseño de software, como arquitectura de software o comunicación oral, relacionados de algún modo con el proyecto común a desarrollar. La información de los seminarios se encuentra únicamente en el Aula Virtual. Las cinco sesiones de seminarios se organizan como sigue:\n\nSeminario 1 (26 septiembre) - MVC y variantes + LLM\nSeminario 2 (17 octubre) - Caso de estudio: Software architecture patterns\nSeminario 3 (30/31 octubre) - Conjunto con EI1048. Relacionado con el proyecto común\nSeminario 4 (20/21 noviembre) - Conjunto con EI1048. Relacionado con el proyecto común\nSeminario 5 (12 diciembre) - Comunicación oral efectiva"
  },
  {
    "objectID": "index.html#métodos-de-evaluación",
    "href": "index.html#métodos-de-evaluación",
    "title": "Estás en la EI1039",
    "section": "Métodos de evaluación",
    "text": "Métodos de evaluación\nVuestra participación en clase es fundamental. Las actividades propuestas en el aula durante las sesiones de teoría invitan al trabajo colaborativo y participativo, fomentado el aprendizaje activo, la discusión y la comunicación. Las actividades previas cuentan un 10%. Es necesario entregarlas todas. Los seminarios computan otro 20% de la nota final, según se desglosa en Table 1. A lo largo del curso se informará con más detalle de la naturaleza de los seminarios evaluables.\nEl desarrollo, entrega y defensa del proyecto común cubre el 70% de la nota.\n\n\n\nTable 1: Instrumentos de evaluación\n\n\n\n\n\n\n\n\n\n\n\n\nActividad\n\nPeso\nTipo\nInstrumento\n\n\n\n\nActividades previas\nIndividual\n10%\nFormativa\nCódigo y/o reflexión personal\n\n\nSeminarios 1 y 2\nIndividual\n10%\nFormativa\nReflexión personal\n\n\nSeminarios 3 y 4 (con EI1048)\nGrupo\n10%\nFormativa\nPresentación y discusión\n\n\nProyecto común (con EI1048)\nGrupo\n70%\nAcreditativa\nCódigo, documento escrito, presentación y discusión\n\n\n\n\n\n\n\nPolítica de entrega tardía/retrasada: Las fechas límite semanales (miércoles mediodía para las activiades previas a clase) tienen sentido para que pueda evaluar el trabajo y proporcionar feedback rápido en la siguiente clase de teoría (viernes). Por lo tanto, las actividades entregadas con retraso no se aceptarán sin permiso especial o debida justificación."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html",
    "href": "CODE_OF_CONDUCT.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "To ensure a welcoming environment for all, we require everyone participating in the course to conform to the Code of Conduct given below. This code applies to all spaces related to the course including, but not limited to, classroom, ‘aula virtual’, emails, shared documents, and code repositories. We strongly recommend that anyone running workshops or classes of any kind choose and publish a similar code so that everyone will know what is expected of them and what to do when those expectations are not met.\n\nYou can report Code of Conduct violations in person to Carlos Granell.\nWe are dedicated to providing a welcoming and supportive environment for all people, regardless of background or identity. However, we recognize that some groups in our community are subject to historical and ongoing discrimination, and may be vulnerable or disadvantaged. Membership in such a specific group can be on the basis of characteristics such as gender, sexual orientation, disability, physical appearance, body size, race, nationality, sex, colour, ethnic or social origin, pregnancy, citizenship, familial status, veteran status, genetic information, religion or belief, political or any other opinion, membership of a national minority, property, birth, age, or choice of text editor. We do not tolerate harassment of participants on the basis of these categories, or for any other reason.\nHarassment is any form of behaviour intended to exclude, intimidate, or cause discomfort. Because we are a diverse community, we may have different ways of communicating and of understanding the intent behind actions. Therefore we have chosen to prohibit certain forms of behaviour in our community, regardless of intent.\nProhibited harassing behaviour includes but is not limited to:\n\nwritten or verbal comments which have the effect of excluding people on the basis of membership of a specific group listed above;\ncausing someone to fear for their safety, such as through stalking, following, or intimidation;\nthe display of sexual or violent images;\nunwelcome sexual attention;\nnon-consensual or unwelcome physical contact;\nsustained disruption of talks, events or communications;\nincitement to violence, suicide, or self-harm;\ncontinuing to initiate interaction (including photography or recording) with someone after being asked to stop; and\npublication of private communication without consent.\n\nBehaviour not explicitly mentioned above may still constitute harassment. The list above should not be taken as exhaustive but rather as a guide to make it easier to enrich all of us and the communities in which we participate. All interactions should be professional regardless of location: harassment is prohibited whether it occurs on or offline, and the same standards apply to both.\nEnforcement of the Code of Conduct will be respectful and not include any harassing behaviours.\nThank you for helping make this a welcoming, friendly community for all.\n\nThis code of conduct is a simplification of the CoC for Reproducible Research workshos at AGILE, which is based on a CoC for Teaching Tech Together by Greg Wilson, which in turn is based on that used by PyCon, which in turn is forked from a template written by the Ada Initiative and hosted on the Geek Feminism Wiki."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Attribution-ShareAlike 4.0 International",
    "section": "",
    "text": "Creative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible."
  },
  {
    "objectID": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "href": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "title": "Attribution-ShareAlike 4.0 International",
    "section": "Creative Commons Attribution-ShareAlike 4.0 International Public License",
    "text": "Creative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\n\n__Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\n\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\n\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\n\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.t stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#section",
    "href": "materials/01-arquitectura-conceptos.html#section",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "Architecture is about the important stuff. Whatever that is.\n\n\nRalph Johnson, citado en (Fowler 2003)\n\n\n\nArchitecture is a social construct, a shared understanding of the system. It doesn’t just depend on the software, but on what part of the software is considered important by group consensus.\n\n\nRalph Johnson, citado en (Fowler 2003)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#section-1",
    "href": "materials/01-arquitectura-conceptos.html#section-1",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "Software architecture can be seen as the centrepiece sitting between the business goals and the software system that supports the business to meet these goals.\n\n\n(Tai 2022)\n\n\n\n\n\n\n\n\nAn architect would create just enough design for implementation to satisfy business needs. The idea here is that as the world changes, so do the business requirements. This should be an iterative process. he software architecture should support the business to adopt changes by evolving with the requirements.\nImage credits: (Tai 2022)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#section-2",
    "href": "materials/01-arquitectura-conceptos.html#section-2",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "Arquitectura de software es algo difícil de definir, depende del escenario/proyecto, y de todo lo que se considera importante para el éxito del proyecto.\n\n\n(Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#libro-de-referencia",
    "href": "materials/01-arquitectura-conceptos.html#libro-de-referencia",
    "title": "Fundamentos de arquitectura",
    "section": "Libro de referencia",
    "text": "Libro de referencia\n\n\n\n\nBy Mark Richards and Neal Ford\nJanuary 2020\nCapítulos 1 y 2 (Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#dimensiones-de-la-arquitectura-richards2020",
    "href": "materials/01-arquitectura-conceptos.html#dimensiones-de-la-arquitectura-richards2020",
    "title": "Fundamentos de arquitectura",
    "section": "Dimensiones de la arquitectura (Richards and Ford 2020)",
    "text": "Dimensiones de la arquitectura (Richards and Ford 2020)\n\n\nImage credits: (Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#estructura",
    "href": "materials/01-arquitectura-conceptos.html#estructura",
    "title": "Fundamentos de arquitectura",
    "section": "Estructura",
    "text": "Estructura\n➡️ Estilo(s) de la arquitectura, i.e., por capas, microservicios, etc."
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#estructura---ejemplos",
    "href": "materials/01-arquitectura-conceptos.html#estructura---ejemplos",
    "title": "Fundamentos de arquitectura",
    "section": "Estructura - ejemplos",
    "text": "Estructura - ejemplos\n\n\nImage credits: (Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#características-de-la-arquitectura",
    "href": "materials/01-arquitectura-conceptos.html#características-de-la-arquitectura",
    "title": "Fundamentos de arquitectura",
    "section": "Características de la arquitectura",
    "text": "Características de la arquitectura\n➡️ Criterios/requisitos para el funcionamiento correcto del sistema (ortogonal a la funcionalidad)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#características---ejemplos",
    "href": "materials/01-arquitectura-conceptos.html#características---ejemplos",
    "title": "Fundamentos de arquitectura",
    "section": "Características - ejemplos",
    "text": "Características - ejemplos\n\n\nImage credits: (Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#decisiones-de-la-arquitectura",
    "href": "materials/01-arquitectura-conceptos.html#decisiones-de-la-arquitectura",
    "title": "Fundamentos de arquitectura",
    "section": "Decisiones de la arquitectura",
    "text": "Decisiones de la arquitectura\n➡️ Reglas/restricciones (tajantes) del sistema, i.e. qué se puede y no se puede hacer"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#decisiones---ejemplos",
    "href": "materials/01-arquitectura-conceptos.html#decisiones---ejemplos",
    "title": "Fundamentos de arquitectura",
    "section": "Decisiones - ejemplos",
    "text": "Decisiones - ejemplos\n\n\nImage credits: (Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#principios-de-diseño",
    "href": "materials/01-arquitectura-conceptos.html#principios-de-diseño",
    "title": "Fundamentos de arquitectura",
    "section": "Principios de diseño",
    "text": "Principios de diseño\n➡️ Guías, recomendaciones o preferencias (en vez de reglas tajantes como las decisiones)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#principios-de-diseño---ejemplos",
    "href": "materials/01-arquitectura-conceptos.html#principios-de-diseño---ejemplos",
    "title": "Fundamentos de arquitectura",
    "section": "Principios de diseño - ejemplos",
    "text": "Principios de diseño - ejemplos\n\n\nImage credits: (Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#section-3",
    "href": "materials/01-arquitectura-conceptos.html#section-3",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "Analogy: The building architect creates the blueprint of the building. The engineers build it physically and make it work according to the blueprint. Yet, this is a poor analogy to define what Software Architecture is because the building analogy makes people focus too much on the static aspects of the system. Source: (Tai 2022)\nSimilar analogy: One of the differences between building architecture and software architecture is that a lot of decisions about a building are hard to change. It is hard to go back and change your basement, though it is possible. Source: (Fowler 2003)\nHome Decor Renovation Style Architecture Building Image by rawpixel.com"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#section-4",
    "href": "materials/01-arquitectura-conceptos.html#section-4",
    "title": "Fundamentos de arquitectura",
    "section": "",
    "text": "Analogy (continue): The creation of a city is a better analogy since it involves both static elements like roads, buildings and bridges, and dynamic elements like traffic flows and people living in the city. The architect is the person who comes up with the design of the city, the plan of how it should be built, and how everything is going to fit together. The city architect has a vision of how the city would evolve. Source: (Tai 2022)\nNew York city Image by rawpixel.com"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#arquitecto-vs.-desarrollador",
    "href": "materials/01-arquitectura-conceptos.html#arquitecto-vs.-desarrollador",
    "title": "Fundamentos de arquitectura",
    "section": "Arquitecto vs. Desarrollador",
    "text": "Arquitecto vs. Desarrollador\n\n\nPirámide del conocimiento. Un desarrollador, al principio de su carrera, se centra en la parte alta de la pirámide, para adquirir experiencia y conocimiento técnico, y también para manternerse actualizado sobre lo que sabe.\nImage credits: (Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#arquitecto-vs.-desarrollador-ii",
    "href": "materials/01-arquitectura-conceptos.html#arquitecto-vs.-desarrollador-ii",
    "title": "Fundamentos de arquitectura",
    "section": "Arquitecto vs. Desarrollador (II)",
    "text": "Arquitecto vs. Desarrollador (II)\n\n\nPirámide del conocimiento: profundidad vs. amplitud técnica. Lo que uno sabe es technical depth, y lo mucho que uno abarca o sabe es technical breadth.\nImage credits: (Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#arquitecto-vs.-desarrollador-iii",
    "href": "materials/01-arquitectura-conceptos.html#arquitecto-vs.-desarrollador-iii",
    "title": "Fundamentos de arquitectura",
    "section": "Arquitecto vs. Desarrollador (III)",
    "text": "Arquitecto vs. Desarrollador (III)\n\n\nArquitecto\nbreadth  depth\nArchitect should know what should be done to create a platform/product in the right way (Francis 2022)\n\nDesarrollador\ndepth  breadth\nDeveloper knows what can be done to create a platform/product (Francis 2022)\n\n\n\n\n\n\n\n\nRecuerda\n\n\nA Software Architect needs a broad and deep knowledge of almost everything in order to accomplish the business goals (Tai 2022)\n\n\n\n\nSource: What it takes to become a software architect"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#arquitecto-breadth-depth",
    "href": "materials/01-arquitectura-conceptos.html#arquitecto-breadth-depth",
    "title": "Fundamentos de arquitectura",
    "section": "Arquitecto  breadth  depth",
    "text": "Arquitecto  breadth  depth\n\n\nPirámide del conocimiento: El arquitecto se especializa en algunas áreas de interés del proyecto. Sacrifica profundidad técnica en aras de tener una visión más amplia. Image credits: (Richards and Ford 2020)"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#qué-roles-desempeña-una-arquitectoa",
    "href": "materials/01-arquitectura-conceptos.html#qué-roles-desempeña-una-arquitectoa",
    "title": "Fundamentos de arquitectura",
    "section": "¿Qué roles desempeña un/a arquitecto/a",
    "text": "¿Qué roles desempeña un/a arquitecto/a\n\n\nGUÍA decisiones de arquitectura, principios de diseño, estructura…\nCAMBIO: Analiza continuamente y recomienda mejoras\nVISIÓN: Esta al día con (y expuesto a) las últimas tendencias\nLIDERAZGO: Se asegura que la implementación sigue las decisiones/principios\nSÍNTESIS: Integra conocimiento de dominio de negocio y técnico\nMENTORING: Posee habilidades de comunicación, trabajo en equipo, soft skills"
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#the-first-law-of-software-architecture",
    "href": "materials/01-arquitectura-conceptos.html#the-first-law-of-software-architecture",
    "title": "Fundamentos de arquitectura",
    "section": "The First Law of Software Architecture",
    "text": "The First Law of Software Architecture\n\nEverything in software architecture is a trade-off.\n\n\nMark Richards & Neal Ford (Richards and Ford 2020)\n\n\n\n➡️ There’s no perfect solution — only choices with consequences. The only constant in software is change.\n➡️ Evaluate trade-offs consciously. Every architectural decision affects the system’s behavior, flexibility, and cost.\n➡️ The only constant in software is change."
  },
  {
    "objectID": "materials/01-arquitectura-conceptos.html#the-second-law-of-software-architecture",
    "href": "materials/01-arquitectura-conceptos.html#the-second-law-of-software-architecture",
    "title": "Fundamentos de arquitectura",
    "section": "The Second Law of Software Architecture",
    "text": "The Second Law of Software Architecture\n\nWhy is more important than how.\n\n\nMark Richards & Neal Ford (Richards and Ford 2020)\n\n\n\n➡️ Essential for well-informed decisions.\n➡️ Understanding the rationale behind our choices allows us to reevaluate them when needed and retain valuable knowledge."
  },
  {
    "objectID": "materials/02-patrones-comportamiento.html",
    "href": "materials/02-patrones-comportamiento.html",
    "title": "Patrones de comportamiento",
    "section": "",
    "text": "Definición\n\n\n\nLos patrones de comportamiento se refieren a la comunicación entre objetos en tiempo de ejecución, es decir, los roles que asumen dichos objetos y cómo interactúan entre sí.\n\n\nLas secciones relativas a los patrones de comportamiento se dividen en los mismos apartados, tal como reflejan los mapas conceptuales:\n\nPropósito (aim)\nProblema (what problem does it solve?)\nSolución (conceptual solution)\nVentajas e inconvenientes (pros and cons)\n\nDejamos para la argumentación y discusión en clase la tarea de conectar y relacionar los distintos patrones de comportamiento entre ellos, y sugerir situaciones o aplicaciones donde se puedan aplicar.\n\nCommand\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\npermite encapsular una petición como un objeto …\n… porque quiero tener mayor control sobre el ciclo de vida de dicha petición\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nCommand pattern\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Command en Java (refactoring.guru)\n\n\n\n\nMemento\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\npermite capturar el estado de un objeto …\n… porque quiero restaurar ese estado en cualquier momento\n\n\n\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Memento en Java (refactoring.guru)\n\n\n\n\nChain of responsibility\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\npermite distribuir responsabilidad de una petición …\n… porque tengo un número variable de objetos que pueden gestionarla\n\n\n\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Chain of Reponsibility en Java (refactoring.guru)\n\n\n\n\nTemplate method\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\ndefine un algoritmo a nivel de superclase…\n… pero permite que subclases sobrescriban partes del algoritmo\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nTemplate Method pattern\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Template Method en Java (refactoring.guru)\n\n\n\n\n\nObserver\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\ndefine un mecanismo de suscripción sobre un objeto (sujeto) …\n… porque hay un número variable de objetos observadores que dependen de sus cambios\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nObserver pattern\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Observer en Java (refactoring.guru)\n\n\n\n\nStrategy\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nPermite seleccionar un método/algoritmo en tiempo real …\n… porque hay diferentes algoritmos intercambiables para resolver un mismo problema\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nStrategy pattern\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Strategy en Java (refactoring.guru)\n\n\n\n\nMediator\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nEncapsula comunicaciones/interacciones entre objetos …\n… para evitar dependencias directas y código spaguetti\n\n\n\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Mediator en Java (refactoring.guru)\n\n\n\n\nIterator\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nProporciona un mecanismo de acceso a los elementos de una colección sin exponer su estructura/representación interna…\n… porque tengo diferentes tipos de colecciones y quiero acceder de forma homegénea a todas\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nIterator pattern\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Iterator en Java (refactoring.guru)\n\n\n\n\nState\n\n\nInterpreter\n\n\nRelaciones entre patrones\n\n\nAplicabilidad",
    "crumbs": [
      "Patrones de diseño",
      "Patrones de comportamiento"
    ]
  },
  {
    "objectID": "materials/02-patrones-estructurales.html",
    "href": "materials/02-patrones-estructurales.html",
    "title": "Patrones estructurales",
    "section": "",
    "text": "Definición\n\n\n\nLos patrones estrcuturales se refieren a la organización del código, es decir, a la composición de clases y objetos. Definen formas de componer y organizar clases para obtener fines estructurales (nuevas funciones, etc.).\n\n\nLas secciones relativas a los patrones estructurales se dividen en los mismos apartados, tal como reflejan los mapas conceptuales:\n\nPropósito (aim)\nProblema (what problem does it solve?)\nSolución (conceptual solution)\nVentajas e inconvenientes (pros and cons)\n\nDejamos para la argumentación y discusión en clase la tarea de conectar y relacionar los distintos patrones estructurales entre ellos, y sugerir situaciones o aplicaciones donde se puedan aplicar.\n\nAdapter\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\npermite que clases con interfaces incompatibles colaboren…\n… porque quiero utilizar cierta clase o librería externa\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nAdapter pattern\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Adapter en Java (refactoring.guru)\n\n\n\n\nBridge\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nsepara subsistemas…\n… porque puede que un subsistema cambie completamente sin que eso afecte al otro subsistema\n\n\n\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Bridge en Java (refactoring.guru)\n\n\n\n\nFacade\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nsimplifica la interfaz a un subsistema…\n… porque quiero ocultar la complejidad de un subsistema a los clientes\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\nFacade pattern\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Facade en Java (refactoring.guru)\n\n\n\n\nProxy\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nsuplanta recursos reales de forma transparente al cliente…\n… porque quiero implantar restricciones de acceso o reducir coste\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\nProxy pattern\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Proxy en Java (refactoring.guru)\n\n\n\n\nComposite\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nmanipula jerarquías de objetos somo si fueran de solo un tipo …\n… porque quiero tratar objetos individuales y compuestos de la misma forma\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\nComposite pattern\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Composite en Java (refactoring.guru)\n\n\n\n\nDecorator\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nañade nuevas reponsabilidades/comportamientos a objetos\n… porque quiero añadirlos, quitarlos, o agregarlos dinámicamente\n\n\n\n\n\n\n\n\n\n\n\n\nSlide Deck\n\n\n\nDecorator pattern\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Decorator en Java (refactoring.guru)\n\n\n\n\nFlyweight\n\n\n\n\n\n\n\nPropósito\nProblema\n\n\n\n\nconstruye objetos ligeros que comparten estado…\n… porque tengo problemas de memoria al tener muchos objetos similares\n\n\n\n\n\n\n\n\n\n\n\n\nImplementación\n\n\n\n Flyweight en Java (refactoring.guru)\n\n\n\n\nRelaciones entre patrones\n\n\nAplicabilidad",
    "crumbs": [
      "Patrones de diseño",
      "Patrones estructurales"
    ]
  },
  {
    "objectID": "materials/02-patrones.html",
    "href": "materials/02-patrones.html",
    "title": "Introducción a los patrones de diseño de software",
    "section": "",
    "text": "El término patrón tiene multiples significados según el contexto: patrones numéricos, patrones geométricos, etc.\nEn informática, el área de aprendizaje automático utiliza técnicas computacionales avanzadas para buscar y encontrar patrones en los datos.\nEn ingeniería de software, descubrirás a lo largo de tu carrera profesional que los mismos problemas de diseño se repiten una y otra vez. Hay muchas formas de abordar estos problemas, pero en la industria se prefieren las soluciones más flexibles y/o reutilizables. Ahí es donde los patrones de diseño entran en juego.\n\n\n\n\n\n\nDefinición\n\n\n\nUn patrón de diseño es una solución práctica y bien testeada a problemas recurrentes.\n\n\nLos patrones de diseño nos permiten (re)utilizar soluciones previamente testeadas que los desarrolladores han utilizado a menudo para resolver un problema de diseño de software, de modo que no es necesario crear una nueva solución a partir de los principios básicos de la programación orientada a objetos. Los patrones de diseño no son solo soluciones teóricas o académicas, son soluciones reales que se utilizan en la industria del software.\nUna buena analogía para entender el concepto de patrones de diseño es equipararlos a planos predefinidos que se pueden personalizar para resolver un problema de diseño recurrente en tu código.\n\n\n\n\n\n\n\nSource: Rawpixel.com\nEs importante dejar claro que los patrones de diseño no son únicamente código (clases, interfaces, etc) que se añaden a tu proyecto de software. En cambio, los patrones de diseño son como soluciones conceptuales: soluciones que se pueden aplicar (y personalizar) en el diseño de software en contextos concretos para mejorar la estructura, modularidad, abstracción, flexibilidad y reutilización de tu código. Por ese motivo, en este curso describimos los patrones de diseño de forma conceptual (clases, interfaces, relaciones, etc.); obviamente, podrás implementar patrones de diseño en el contexto del proyecto común.\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nPatrones de Diseño: Concepto, catálogo y principios",
    "crumbs": [
      "Patrones de diseño",
      "Introducción a los patrones de diseño de software"
    ]
  },
  {
    "objectID": "materials/02-patrones.html#qué-es-un-patrón",
    "href": "materials/02-patrones.html#qué-es-un-patrón",
    "title": "Introducción a los patrones de diseño de software",
    "section": "",
    "text": "El término patrón tiene multiples significados según el contexto: patrones numéricos, patrones geométricos, etc.\nEn informática, el área de aprendizaje automático utiliza técnicas computacionales avanzadas para buscar y encontrar patrones en los datos.\nEn ingeniería de software, descubrirás a lo largo de tu carrera profesional que los mismos problemas de diseño se repiten una y otra vez. Hay muchas formas de abordar estos problemas, pero en la industria se prefieren las soluciones más flexibles y/o reutilizables. Ahí es donde los patrones de diseño entran en juego.\n\n\n\n\n\n\nDefinición\n\n\n\nUn patrón de diseño es una solución práctica y bien testeada a problemas recurrentes.\n\n\nLos patrones de diseño nos permiten (re)utilizar soluciones previamente testeadas que los desarrolladores han utilizado a menudo para resolver un problema de diseño de software, de modo que no es necesario crear una nueva solución a partir de los principios básicos de la programación orientada a objetos. Los patrones de diseño no son solo soluciones teóricas o académicas, son soluciones reales que se utilizan en la industria del software.\nUna buena analogía para entender el concepto de patrones de diseño es equipararlos a planos predefinidos que se pueden personalizar para resolver un problema de diseño recurrente en tu código.\n\n\n\n\n\n\n\nSource: Rawpixel.com\nEs importante dejar claro que los patrones de diseño no son únicamente código (clases, interfaces, etc) que se añaden a tu proyecto de software. En cambio, los patrones de diseño son como soluciones conceptuales: soluciones que se pueden aplicar (y personalizar) en el diseño de software en contextos concretos para mejorar la estructura, modularidad, abstracción, flexibilidad y reutilización de tu código. Por ese motivo, en este curso describimos los patrones de diseño de forma conceptual (clases, interfaces, relaciones, etc.); obviamente, podrás implementar patrones de diseño en el contexto del proyecto común.\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nPatrones de Diseño: Concepto, catálogo y principios",
    "crumbs": [
      "Patrones de diseño",
      "Introducción a los patrones de diseño de software"
    ]
  },
  {
    "objectID": "materials/02-patrones.html#principios-solid",
    "href": "materials/02-patrones.html#principios-solid",
    "title": "Introducción a los patrones de diseño de software",
    "section": "Principios SOLID",
    "text": "Principios SOLID\nVarios autores (Michael Feathers, Robert C. Martin, etc. ) han contribuido a definir una serie de principios (recomendaciones, etc.) para que desarrolladores/programadores generen software de calidad. ¿Y qué entendemos por software de calidad? Software que sea\n\nrobusto y estable,\nreutilizable y mantenible,\nescalable, es decir, que se pueda modificar/extender fácilmente.\n\nSin embargo, que el código resultante sea robusto y estable por un lado, pero que también sea fácilmente extendible y reutilizable por otro, parece que sean objetivos contradictorios. En ingeniería y desarrollo de software, tenemos dos conceptos que tenemos que balancear adecuadamente al mismo tiempo para producir software de calidad.\n\n\n\n\n\n\nDefinición\n\n\n\nAcoplamiento indica el grado de interdependencia entre entidades/componentes de software (ya sean clases, métodos, módulos, funciones, etc. ). Si dos componentes son completamente independientes entre sí, entonces están desacoplados.\n\n\nComo ingenieros/as de software, queremos que el software generado tenga un bajo acomplamiento.\n\n\n\n\n\n\nDefinición\n\n\n\nCohesión indica el grado en que entidades/componentes de software independientes se combinan para alcanzar un resultado (comporatemeionte, etc) mejor que si trabajaran por separado. Se refiere a la forma en que podemos agrupar componentes de software.\n\n\nComo ingenieros/as de software, queremos que el software generado tenga una alta cohesión.\nLos principios SOLID están estrechamente relacionados con el uso de patrones de diseño, ya que las solucciones conceptuales de muchos patrones apuntan directamente a uno o varios de los principios SOLID. Luego, cuando utilizas patrones de diseño de forma eficaz, estarás poniendo en práctica alguno de los principios SOLID para que el código resultante sea de la mejor calidad posible.\nLos 5 principios SOLID de diseño de aplicaciones de software son:\n\nS – Single Responsibility Principle (SRP)\nO – Open/Closed Principle (OCP)\nL – Liskov Substitution Principle (LSP)\nI – Interface Segregation Principle (ISP)\nD – Dependency Inversion Principle (DIP)\n\n\n\n\n\n\n\nSlide Deck\n\n\n\n\n\nPrincipios SOLID",
    "crumbs": [
      "Patrones de diseño",
      "Introducción a los patrones de diseño de software"
    ]
  },
  {
    "objectID": "materials/03-seminario-mvc.html",
    "href": "materials/03-seminario-mvc.html",
    "title": "MVC y variantes",
    "section": "",
    "text": "Imagínate que estás en una entrevista de trabajo y el entrevistador de recuros humanos os hace la siguiente pregunta",
    "crumbs": [
      "Seminarios",
      "MVC y variantes"
    ]
  },
  {
    "objectID": "materials/03-seminario-mvc.html#caso",
    "href": "materials/03-seminario-mvc.html#caso",
    "title": "MVC y variantes",
    "section": "Caso",
    "text": "Caso\nLas herramientas para lenguajes de programación visual (LPV) normalmente están basadas en el patrón MVC. Algunas herramientas permite crear multiples lengaujes visuales a partir de un mismo código ¿Qué es el Modelo y la Vista en ese tipo de herrramientas?\nOtro tipo de herramientas LPV permiten programar de manera visual utilizando un conjunto de elementos gráficos como sucede en Scratch. En este caso, ¿qué representa el Modelo y qué la Vista?\n\n\n\n\n\n\n\nSlide Deck\n\n\n\n\nMVC y variantes",
    "crumbs": [
      "Seminarios",
      "MVC y variantes"
    ]
  }
]